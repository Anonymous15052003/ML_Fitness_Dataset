# -*- coding: utf-8 -*-
"""ML_Ques1_SHARON_CHATTOPADHYAY.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vrnbxivg9ThBXqGTwC1q2qh3tDRHRJU7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/fitness_class_2212.csv')

df.head()

df.shape

df.info()

df = df.drop(columns='booking_id', axis=1)

df.isnull().sum()

weight_mean = df['weight'].mean()
df['weight'].fillna(weight_mean, inplace=True)

df.isnull().sum()

cat_col = []
num_col = []

for col in df.columns:
    if df[col].dtype == 'object':
        cat_col.append(col)
    else:
        num_col.append(col)

for col in cat_col:
    print(f'{col} :', df[col].unique())

for i, element in enumerate(df['days_before']):
    df['days_before'][i] = element.replace('days', '')

df['day_of_week'] = df['day_of_week'].replace('Wednesday', 'Wed')
df['day_of_week'] = df['day_of_week'].replace('Fri.', 'Fri')
df['day_of_week'] = df['day_of_week'].replace('Monday', 'Mon')

for col in cat_col:
    print(f'{col} :', df[col].unique())

from sklearn.preprocessing import LabelEncoder

label_encoding = {}

for col in cat_col:
    label_encoding[col] = LabelEncoder()
    df[col] = label_encoding[col].fit_transform(df[col])

df.head()

sns.pairplot(data=df, hue='attended')
plt.show()

sns.heatmap(df.corr(), cmap='rainbow', annot=True, linecolor='black', linewidths=0.5)
plt.show()

sns.countplot(data=df, x='attended')
plt.show()

from sklearn.model_selection import train_test_split

X = df.iloc[:,:-1]
X

y = df['attended']
y

from imblearn.over_sampling import RandomOverSampler

resamp = RandomOverSampler()

tempX, tempy = resamp.fit_resample(X, y)

sns.countplot(data=df, x=y)
plt.show()

sns.countplot(data=df, x=tempy)
plt.show()

X_train, X_test, y_train, y_test = train_test_split(tempX, tempy, test_size=0.2, random_state=0)

from sklearn.ensemble import RandomForestClassifier

RNF = RandomForestClassifier()

RNF.fit(X_train, y_train)

y_hat = RNF.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

accuracy_score(y_test, y_hat)

print(classification_report(y_test, y_hat))

sns.heatmap(confusion_matrix(y_test, y_hat), cmap='coolwarm', fmt='.3g',linecolor='black', annot=True, linewidths=0.5)
plt.show()